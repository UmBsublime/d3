
HeroRequest just returns EVERYTHING about the hero
    Hero will use it to fill itself
        Hero_container will contain a hero and all of its items
            ProfileContainer will contain everything about all heroes and the profile and manipulate HeroContainer's interface


AbstractRequest()

    HeroRequest()
    ItemRequest()
    ProfileRequest()

AbstractElement()
    +SendRequest()
    +ParseData()
    self.raw_data

        Hero()
            +GetItemUrls()
            self.item_url_collection[]
            self.skill_list[Skill1, Skill2, ...]
            self.

        Item()
            self.type
            self.properties = PropertyContainer
            self.tooltip
            self.gems


            Weapon():
            Equipment():
                Arm():
                Shield():
                 . . .
                Legs()

        Profile()
            +
            self.gameProgress
            self.hero_id_list[]
            self.fallen_heroes[]

Property():
    self.type  # can be [dmgModifier, skillModifier, baseStatModifier, gameModifier, lifeModifier, manaModifier]
    self.name
    self.effect


PropertyContainer()
    +GetPropertyNames()
        names = []
        for prop in self.propertyList:
            names.append(prop.name)

    self.propertyList[ItemProperty1, ItemProperty2, ...]


HeroSkill()
    self.properties = PropertyContainer()
    self.name
    self.tooltip
    self.rune

AbstractContainer()

    SkillContainer()

    ItemContainer()

    HeroContainer()
        +GatherAll()
        self.skills = Skillcontainer()
        self.items = ItemContainer()
        self.HeroList[{'hero': Hero1, 'skills': SkillsContainer, 'itemset': ItemContainer}]

